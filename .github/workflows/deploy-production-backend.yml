# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build Deploy Production Backend

on:
  push:
    branches: ["main"]
    paths:
      - "backend/**"
  pull_request:
    branches: ["main"]
    paths:
      - "backend/**"
jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    # strategy:
    #   matrix:
    #     node-version: [20.x, 21.x, 22.x]

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: NODE_ENV=production npm run build

      - name: Archive production artifacts
        run: tar -czf artifact.tar.gz "build"

      - name: Check 02 the current directory
        run: ls -la

      - name: Upload production build artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact.tar.gz
          path: artifact.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check 1 the current directory
        run: sls -la

      - name: Download production build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build.tar.gz
          path: ./

      - name: Check 2 the current directory
        run: ls -la

      - name: Create SSH key's files
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa && echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa.pub
        # run: xxx && chmod 600 id_rsa

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Provisioning the infrastructure and configure it
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply - Provision Resources
        # env:
        # TOKEN: ${{ secrets.DIGITALOCEAN_IAC_TOKEN }}
        run: terraform -chdir=iac apply -auto-approve -var "digitalocean_token=${{ secrets.DIGITALOCEAN_IAC_TOKEN }}"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          export_default_credentials: true

      - name: Download SQLite database Backup file
        run: |
          mkdir -p ".$(dirname ${{ github.SQLITE_DATABASE_FILE_PATH }})"
          gsutil cp "gs://${{ github.GCP_DATABASE_BACKUP_BUCKET }}/$(basename ${{ github.SQLITE_DATABASE_FILE_PATH }})" ".${{ secrets.SQLITE_DATABASE_FILE_PATH }}"

      - name: Add the environment variables
        run: |
          echo 'NODE_ENV=${{ github.NODE_ENV }}' >> .env && 
          echo 'PORT=${{ github.PORT }}' >> .env && 
          echo 'HOST=${{ github.HOST }}' >> .env && 
          echo 'SQLITE_DATABASE_FILE_PATH=${{ github.SQLITE_DATABASE_FILE_PATH }}' >> .env && 
          echo 'GCP_BASE_URL=${{ github.GCP_BASE_URL }}' >> .env && 
          echo 'GCP_BUCKET_NAME=${{ github.GCP_BUCKET_NAME }}' >> .env && 
          echo 'GCP_UNIFORM=${{ github.GCP_UNIFORM }}' >> .env && 
          echo 'GCP_DATABASE_BACKUP_BUCKET=${{ github.GCP_DATABASE_BACKUP_BUCKET }}' >> .env && 
          echo 'OTHER_SHOP_ID=${{ github.OTHER_SHOP_ID }}' >> .env && 
          echo 'PUBLIC_URL=${{ github.PUBLIC_URL }}' >> .env && 
          echo 'STRIPE_CHECKOUT_REDIRECT_URL=${{ github.STRIPE_CHECKOUT_REDIRECT_URL }}' >> .env && 
          echo 'APP_KEYS=${{ secrets.APP_KEYS }}' >> .env && 
          echo 'API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}' >> .env && 
          echo 'ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}' >> .env && 
          echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env && 
          echo 'GCP_SERVICE_ACCOUNT=${{ secrets.GCP_SERVICE_ACCOUNT }}' >> .env && 
          echo 'STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}' >> .env && 
          echo 'STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}' >> .env && 
          echo 'NODEMAILER_USER=${{ secrets.NODEMAILER_USER }}' >> .env && 
          echo 'NODEMAILER_PASS=${{ secrets.NODEMAILER_PASS }}' >> .env

      - name: Archive production artifacts
        run: tar -czf app.tar.gz "./"

      - name: Deploy application
        run: |
          scp -r app.tar.gz root@$(terraform output -raw droplet_ip):/root && 
          ssh root@$(terraform output -raw droplet_ip) 'tar -xzf /root/app.tar.gz -C /root/ && cd app && npm i --production && NODE_ENV=production pm2 restart app --cron-restart="0 23 * * *" || NODE_ENV=production pm2 start server.js --name app && systemctl restart nginx'

        # "always()" function makes sure that "Cleanup" step runs regardless of the success or failure of previous steps.
      - name: Cleanup
        if: always()
        run: rm -f .env app.tar.gz iac/id_rsa iac/id_rsa.pub

# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Backend Production Pipeline

on:
  push:
    branches: ["main"]
    paths:
      - "backend/**"
  pull_request:
    branches: ["main"]
    paths:
      - "backend/**"
jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    # strategy:
    #   matrix:
    #     node-version: [18.x, 20.x, 22.x]

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: NODE_ENV=production npm run build

      - name: Save production build artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: backend/build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download saved production build artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: backend/build

      - name: Add the environment variables
        run: |
          cat <<EOF> .env
          NODE_ENV=${{ vars.NODE_ENV }}
          PORT=${{ vars.PORT }}
          HOST=${{ vars.HOST }}
          SQLITE_DATABASE_FILE_NAME=${{ vars.SQLITE_DATABASE_FILE_NAME }}
          GCP_BASE_URL=${{ vars.GCP_BASE_URL }}
          GCP_BUCKET_NAME=${{ vars.GCP_BUCKET_NAME }}
          GCP_UNIFORM=${{ vars.GCP_UNIFORM }}
          GCP_DATABASE_BACKUP_BUCKET=${{ vars.GCP_DATABASE_BACKUP_BUCKET }}
          OTHER_SHOP_ID=${{ vars.OTHER_SHOP_ID }}
          PUBLIC_URL=${{ vars.PUBLIC_URL }}
          STRIPE_CHECKOUT_REDIRECT_URL=${{ vars.STRIPE_CHECKOUT_REDIRECT_URL }}
          APP_KEYS=${{ secrets.APP_KEYS }}
          API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
          ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GCP_SERVICE_ACCOUNT=${{ secrets.GCP_SERVICE_ACCOUNT }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
          NODEMAILER_USER=${{ secrets.NODEMAILER_USER }}
          NODEMAILER_PASS=${{ secrets.NODEMAILER_PASS }}
          EOF

      - name: Archive production artifacts
        run: tar -czf ../app.tar.gz . && mv ../app.tar.gz .

      - name: Add SSH keys and tfstate files for Terraform
        # env:
        #   DECODED_VALUE: $(echo ${{ secrets.TERRAFORM_STATE }} | base64 --decode)
        run: |
          echo "${{ secrets.SSH_FINGERPRINT_KEY }}" > iac/id_rsa.pub
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > iac/id_rsa
          DECODED_VALUE=$(echo ${{ secrets.TERRAFORM_STATE }} | base64 --decode)
          [ "$DECODED_VALUE" = "{}" ] || echo "$DECODED_VALUE" > iac/terraform.tfstate
          ls iac
          cat iac/terraform.tfstate

      # Provisioning the infrastructure and configure it
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform -chdir=iac init
      - name: Terraform Apply - Provision Resources
        run: terraform -chdir=iac apply -auto-approve -var "digitalocean_token=${{ secrets.DIGITALOCEAN_IAC_TOKEN }}"

      # - name: Update Terraform tfstate file
      #   if: always()
      #   run: |
      #     echo "${{ secrets.GH_ALM_REPO_TOKEN }}" | gh auth login --with-token
      #     gh secret set "TERRAFORM_STATE" --body "$(base64 -i iac/terraform.tfstate)"

      #  Prepare SSH fingerprint key file for Terraform
      - name: Prepare SSH Private key for deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan $(terraform -chdir=iac output -raw droplet_ip) >> ~/.ssh/known_hosts

      - name: Waiting for the VM to boot up
        run: sleep 10

      - name: Deploy application
        run: |
          scp -r app.tar.gz root@$(terraform -chdir=iac output -raw droplet_ip):/root &&
          ssh root@$(terraform -chdir=iac output -raw droplet_ip) "tar -xzf /root/app.tar.gz && /root/iac/retry-script.sh init-setup"
      #  Or run a script: chmod +x ./iac/deploy-script.sh && ./iac/deploy-script.sh
      #
      # "always()" function makes sure that "Cleanup" step runs regardless of the success or failure of previous steps.
      - name: Cleanup
        if: always()
        run: rm -f .env app.tar.gz id_rsa id_rsa.pub iac/terraform.tfstate
